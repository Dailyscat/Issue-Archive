Issue: 회사 프로덕트의 ssl인증 갱신이 필요한 상황

해결 방법은 두가지가 있었다.
(1) comodo라는 회사의 1년짜리 ssl인증을 받아 갱신한다
(2) Let's Encrypt라는 비영리 단체의 90일 짜리 ssl 인증을 받아 갱신한다.

회사의 상황은 반년 이내에 aws로 migration이 예정되있던 상태라서 1년까지의 인증이 필요 없었으며, 개인적으로 Let's Encrypt는 무료이기 때문에 시간이 조금 더 걸리더라도 Let's Encrypt의 ssl 인증 방식을 택하기로 했다.

회사의 상황은 ubuntu 16.04 server에 nginx를 사용하고, 그 안에서 경로를 설정하여 SSL인증을 거치는 방식이었다.

참조한 사이트:
https://blog.outsider.ne.kr/1178

아웃사이더님의 포스팅을 보고 따라하던 중 이 도메인이 사용하고 있는 도메인이 맞는지 확인하는 과정에서 문제가 생겼다.
main주제: nginx의 server 블록에 location 블록을 만들고 let's encrypt에서 요청하는 경로를 설정하고 그 경로에 파일을 만들었는데 아무리 해도 그 경로를 인식하지를 못했다.


참조한 사이트: http://kwonnam.pe.kr/wiki/nginx/location
첫번째 디버깅으로는 nginx의 location을 설정하는 방법(alias와 root)이 잘못되었나 하여 고쳐보았다.

ex)
http://example.com/images/something/somepath/myfile.png 의 경로 요청일 때

location /images/something/ {
    alias /var/www/something/;
}

=> 실제 경로는 /var/www/something/sompath/myfile.png

location /images/something/ {
    root /var/www/something/;
}

=> 실제 경로는 /var/www/something/images/something/somepath/myfile.png

참조 사이트: https://letsencrypt.org/docs/rate-limits/
그런데 root, alias 둘 다 써보면서 각각의 경로로 설정해봐도 도통 요청을 제대로 받지를 못하고 404가 떴다. 더군다나 몇번 시도를 해보다가 이 제대로된 도메인인지를 확인하는 과정이 한시간에 5번인가의 제한이 있는걸 하다가 알게 되어서 중간 중간 쓸데 없는 시간을 보내게 됐다. 

어쨌든 계속 시도를 해보다가 현재는 적절한 도메인임을 인증하는게 중요하다고 생각되어서 생각을 바꿔서 다른 시도를 해보기로 했다.

(1) meteor를 빌드하여 생긴 build 폴더내부에 certbot에서 요청을 보내는 경로를 사용하여 nginx에 위에서 했던 방법으로 경로를 설정한다. 
이 방법은 meteor의 특성상 어떤 source의 요청이 왔을 때, public 폴더로 가서 찾게 되는 방식을 이용하려고 한건데, 이미 build된 폴더 내부에서는 public를 새로 만들어줘도 가지를 않았다. 

(2) 애초에 빌드 전 public폴더 내부에 요청이 온 경로에 해당하는 폴더와 파일을 만들고 빌드한다.
이 방법으로 해당하는 루트에서 파일을 확인할 수 있게 됐다.


이후 적을 프로세스
인증프로세스가 위에 두개만 해도 되는데
나는 그 밑에 두세개 까지 다했는데
그 세번째 까는게 조금 오래 걸렸었고,
네번째는 금방했다. 그 중간에 도메인만 바꿔주면 큰 어려움 없었음.
이때 
바로 적용이 안되고 캐시문제 혹은 let's encrypt에서 인증을 받았다고 클라이언트 들에서 확인을 하고나서 되는 거에
 시간이 약간 걸릴 수 있다는 주의점을 적어야한다.
crontab을 이용한 갱신 프로세스 
